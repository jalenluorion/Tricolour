const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY,
    scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
    ],
});

const doc = new GoogleSpreadsheet('1rF8rinTzOqJhOyrxwb_cjrtahPEHRn7kPqEffSdKnQc', serviceAccountAuth);

module.exports = {
    async name(searchQuery) {
        if (searchQuery == null) {
            return null;
        }

        await doc.loadInfo();
        const list = doc.sheetsByTitle['CENSUS'];
        await list.loadCells();
        const totalRows = list.rowCount;

        for (let i = 1; i < totalRows; i++) {
            const discordIDOne = list.getCell(i, 0).value;
            const minecraftIGN = list.getCell(i, 1).value;
            const discordIDTwo = list.getCell(i, 3).value;
            const region = list.getCell(i, 4).value; 
            if (region == null) {
                break;
            }
            const contribution = list.getCell(i, 7).value;

            if ((minecraftIGN != null && searchQuery.toLowerCase() == minecraftIGN.toLowerCase()) || (discordIDOne != null && searchQuery.toLowerCase() == discordIDOne.toLowerCase()) || (discordIDTwo != null && searchQuery.toLowerCase() == discordIDTwo.toLowerCase())) {
                return { minecraftIGN, discordIDOne, discordIDTwo, region, contribution };
            }
        }
        return null;
    }
};