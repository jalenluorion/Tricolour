const { SlashCommandBuilder } = require('@discordjs/builders');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY,
    scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
    ],
});

const doc = new GoogleSpreadsheet('12BsWUJCF-MLMX2itBJHmVaMdnghyoKFEUpyHpz1tQpE', serviceAccountAuth);

module.exports = {
    data: new SlashCommandBuilder()
        .setName('compare')
        .setDescription('Compare the database with the server.')
        .addIntegerOption(option =>
            option.setName('number')
                .setDescription('1: azure, 2: verdant, 3: scarlet')
                .setRequired(true)),
    async execute(interaction) {
        const number = interaction.options.getInteger('number');
        const azureRole = interaction.guild.roles.cache.get("1175866498804367430");
        const verdantRole = interaction.guild.roles.cache.get("1175866500834414623");
        const scarletRole = interaction.guild.roles.cache.get("1175866468018167808");

        const azureServer = azureRole.members.filter(member => member.user.tag != "Tricolour Bot#2125" && member.user.tag != "jophielswings");
        const verdantServer = verdantRole.members.filter(member => member.user.tag != "Tricolour Bot#2125" && member.user.tag != "jophielswings");
        const scarletServer = scarletRole.members.filter(member => member.user.tag != "Tricolour Bot#2125" && member.user.tag != "jophielswings");

        await doc.loadInfo();
        if (number == 1) {
            // Get the sheet by title
            const sheet = doc.sheetsByTitle['Azure'];

            // Load all cells in the sheet
            await sheet.loadCells();

            // Get the total number of rows in column C
            const totalRows = sheet.rowCount;

            var azureSheet = [];

            // Read values from column C and print to console
            for (let i = 21; i < totalRows; i++) {
                const cellValue = sheet.getCell(i, 6).value;
                if (cellValue == null) {
                    break;
                }
                azureSheet.push(cellValue);
            }

            //compare azureSheet with azureServer. print a list of people who are in azureSheet but not in azureServer and vice versa

            var azureServerList = azureServer.map(member => member.user.tag);
            var azureSheetList = azureSheet;

            var azureServerNotSheet = azureServerList.filter(x => !azureSheetList.includes(x));
            var azureSheetNotServer = azureSheetList.filter(x => !azureServerList.includes(x));

            if (azureServerNotSheet.length == 0) {
                azureServerNotSheet.push("No difference");
            }
            if (azureSheetNotServer.length == 0) {
                azureSheetNotServer.push("No difference");
            }

            await interaction.reply({ content: `List of Azure members in the **server** but not in the **database**:\n\`\`\`\n${azureServerNotSheet.join('\n')}\`\`\`\nList of Azure members in the **database** but not in the **server**:\n\`\`\`\n${azureSheetNotServer.join('\n')}\`\`\`` });
        } else if (number == 2) {
            const sheet = doc.sheetsByTitle['Verdant'];

            // Load all cells in the sheet
            await sheet.loadCells();

            // Get the total number of rows in column C
            const totalRows = sheet.rowCount;

            var verdantSheet = [];

            // Read values from column C and print to console
            for (let i = 21; i < totalRows; i++) {
                const cellValue = sheet.getCell(i, 6).value; // Column C is index 2 (0-based index)
                if (cellValue == null) {
                    break;
                }
                verdantSheet.push(cellValue);
            }

            var verdantServerList = verdantServer.map(member => member.user.tag);
            var verdantSheetList = verdantSheet;

            var verdantServerNotSheet = verdantServerList.filter(x => !verdantSheetList.includes(x));
            var verdantSheetNotServer = verdantSheetList.filter(x => !verdantServerList.includes(x));

            if (verdantServerNotSheet.length == 0) {
                verdantServerNotSheet.push("No difference");
            }
            if (verdantSheetNotServer.length == 0) {
                verdantSheetNotServer.push("No difference");
            }

            await interaction.reply({ content: `List of Verdant members in the **server** but not in the **database**:\n\`\`\`\n${verdantServerNotSheet.join('\n')}\`\`\`\nList of Verdant members in the **database** but not in the **server**:\n\`\`\`\n${verdantSheetNotServer.join('\n')}\`\`\`` });
        }
        else if (number == 3) {
            const sheet = doc.sheetsByTitle['Scarlet'];

            // Load all cells in the sheet
            await sheet.loadCells();

            // Get the total number of rows in column C
            const totalRows = sheet.rowCount;

            var scarletSheet = [];

            // Read values from column C and print to console
            for (let i = 21; i < totalRows; i++) {
                const cellValue = sheet.getCell(i, 6).value; // Column C is index 2 (0-based index)
                if (cellValue == null) {
                    break;
                }
                scarletSheet.push(cellValue);
            }

            var scarletServerList = scarletServer.map(member => member.user.tag);
            var scarletSheetList = scarletSheet;

            var scarletServerNotSheet = scarletServerList.filter(x => !scarletSheetList.includes(x));
            var scarletSheetNotServer = scarletSheetList.filter(x => !scarletServerList.includes(x));

            if (scarletServerNotSheet.length == 0) {
                scarletServerNotSheet.push("No difference");
            }
            if (scarletSheetNotServer.length == 0) {
                scarletSheetNotServer.push("No difference");
            }

            await interaction.reply({ content: `List of Scarlet members in the **server** but not in the **database**:\n\`\`\`\n${scarletServerNotSheet.join('\n')}\`\`\`\nList of Scarlet members in the **database** but not in the **server**:\n\`\`\`\n${scarletSheetNotServer.join('\n')}\`\`\`` });
        }
        else {
            await interaction.reply({ content: `Invalid number!` });
        }
    }
};